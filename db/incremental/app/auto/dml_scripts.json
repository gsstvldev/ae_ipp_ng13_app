[{
  "key": "215~WFT_NPSS_P_1304_1712148998876_0",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" DELETE FROM QRY_INFO WHERE WFTPA_ID=? AND APP_ID=?\", \"params\" : [\"WFT_NPSS_P_1304_1712148998876_0\", \"215\"] }",
  "qry_type": "D"
},{
  "key": "215~WFT_NPSS_P_1304_1712148998876_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1712211095837~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1712148998876_0$DQ$,$DQ$DS_1712211095837$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  UETR,  CDTR_IBAN,  CDTR_ACCT_NAME,  CR_SORT_CODE,  DBTR_IBAN,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CLRSYSREF,  INTRBK_STTLM_AMNT,  PROCESS_TYPE,  PAYMENT_TYPE,  START_DATE,  END_DATE,  D_SECONDS,  D_MINUTES,  D_HOURS,  DIFFERENCE,  DEPARTMENT_CODE,  NT_RULE_GROUP,  PROCESSED_DATE,  TAT_EXPECTED from  (  select   UETR,   CDTR_IBAN,   CDTR_ACCT_NAME,   CR_SORT_CODE,   DBTR_IBAN,   DBTR_ACCT_NAME,   DR_SORT_CODE,   CLRSYSREF,   V.TENANT_ID,   INTRBK_STTLM_AMNT,   PROCESS_TYPE,   PROCESS_GROUP,   DEPARTMENT_CODE,   PAYMENT_TYPE,   START_DATE,   END_DATE,   D_SECONDS,   D_MINUTES,   D_HOURS,   case    when RB.TAT_FREQUENCY = UPPER($SQ$Seconds$SQ$) then ROUND(V.D_SECONDS)    when RB.TAT_FREQUENCY = UPPER($SQ$Minutes$SQ$) then ROUND(V.D_MINUTES)    when RB.TAT_FREQUENCY = UPPER($SQ$Hours$SQ$) then ROUND(V.D_HOURS)   end as DIFFERENCE,   NT_RULE_GROUP,   RB.TAT_EXPECTED,   PROCESSED_DATE  from   (   select    NT.UETR,    NT.CDTR_IBAN,    NT.CDTR_ACCT_NAME,    NT.CR_SORT_CODE,    NT.DBTR_IBAN,    NT.DBTR_ACCT_NAME,    NT.DR_SORT_CODE,    NT.CLRSYSREF,    NT.INTRBK_STTLM_AMNT,    NT.TENANT_ID,    NT.PROCESS_GROUP,    NT.PRODUCT_CODE,    NT.PROCESS_TYPE,    NT.DEPARTMENT_CODE,    case     when NT.EXHF_ID is null then UPPER($SQ$RCT$SQ$)     else UPPER($SQ$BCT$SQ$)    end as PAYMENT_TYPE,    PL.CREATED_DATE as PL_CREATED_DATE,    TO_CHAR(PL1.CREATED_DATE,    $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as START_DATE,    TO_CHAR(PL.CREATED_DATE,    $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as END_DATE,    extract(EPOCH   from    (PL.CREATED_DATE - PL1.CREATED_DATE)) as D_SECONDS,    extract(EPOCH   from    (PL.CREATED_DATE - PL1.CREATED_DATE)) / 60 as D_MINUTES,    extract(EPOCH   from    (PL.CREATED_DATE - PL1.CREATED_DATE)) / (60 * 60) as D_HOURS,    NT.CREATED_DATE as PROCESSED_DATE,    $SQ$RCT_INWARD_PROCESS_SLA$SQ$ as NT_RULE_GROUP   from    NPSS_TRANSACTIONS NT   inner join (    select     PLR.NPSSTPL_ID,     PLR.UETR,     PLR.CREATED_DATE,     PLR.ROW_NUM    from     (     select      A.NPSSTPL_ID,      A.UETR,      A.CREATED_DATE,      row_number() over(partition by A.UETR     order by      A.NPSSTPL_ID desc) as ROW_NUM     from      NPSS_TRN_PROCESS_LOG A) PLR    where     PLR.ROW_NUM = 1) PL on    PL.UETR = NT.UETR   inner join (    select     PLR1.NPSSTPL_ID,     PLR1.UETR,     PLR1.CREATED_DATE,     PLR1.ROW_NUM    from     (     select      A1.NPSSTPL_ID,      A1.UETR,      A1.CREATED_DATE,      row_number() over(partition by A1.UETR     order by      A1.NPSSTPL_ID asc) as ROW_NUM     from      NPSS_TRN_PROCESS_LOG A1) PLR1    where     PLR1.ROW_NUM = 1) PL1 on    PL1.UETR = NT.UETR) V  inner join CORE_NC_RULE_BOOK_SETUP RB on   RB.RULE_CODE = V.NT_RULE_GROUP   and RB.RULE_CODE = $SQ$RCT_INWARD_PROCESS_SLA$SQ$   and RB.NEED_SYNC = $SQ$Y$SQ$)V1 where  PROCESS_GROUP = UPPER($SQ$rct$SQ$)  and PROCESS_TYPE = $SQ$IP$SQ$  and DIFFERENCE > TAT_EXPECTED::INT $AND$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_1$DQ$] }",
  "qry_type": "I"
}]