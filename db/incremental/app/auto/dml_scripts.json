[{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" DELETE FROM QRY_INFO WHERE WFTPA_ID=? AND APP_ID=?\", \"params\" : [\"WFT_NPSS_P_1304_1673672537964_0\", \"215\"] }",
  "qry_type": "D"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665903906193~DS_1681967964693~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1681967964693$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSSTRRD_ID,  MSG_ID,  UETR,  PARENT_NPSSTRRD_REFNO,  NPSSTRRD_REFNO,  PROCESS_CODE,  PROCESS_DETAIL,  EXHF_ID,  PROCESS_NAME,  MESSAGE_DESC,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  STATUS,  PROCESS_STATUS,PROCESS_TYPE,  MESSAGE_DATA,  CREATEDDATEMILISEC,  DT_CODE,  DTT_CODE from  (  select   NPSSTRRD.NPSSTRRD_ID,   NPSSTRRD.MSG_ID,   NPSSTRRD.UETR,   NPSSTRRD.PARENT_NPSSTRRD_REFNO,   NPSSTRRD.NPSSTRRD_REFNO,   NPSSTRRD.MESSAGE_DATA,   NPSSTRRD.PROCESS_CODE,   NPSSTRRD.PROCESS_DETAIL,   NPSSTRRD.EXHF_ID,   NPSSTRRD.PROCESS_NAME,   NPSSTRRD.MESSAGE_DESC,   NPSSTRRD.CHANNEL_ID,   NPSSTRRD.CHANNEL_REFNO,   NPSSTRRD.CHANNEL_USERID,   NPSSTRRD.CHANNEL_PRODUCT,   NPSSTRRD.CHANNEL_SUB_PRODUCT,   NPSSTRRD.CHANNEL_TRAN_CODE,   NPSSTRRD.CREATED_BY,   NPSSTRRD.CREATED_BY_NAME,   NPSSTRRD.CREATED_DATE,   NPSSTRRD.DT_CODE,   NPSSTRRD.DT_DESCRIPTION,   NPSSTRRD.DTT_CODE,   NPSSTRRD.DTT_DESCRIPTION,   NPSSTRRD.MODIFIED_BY,   NPSSTRRD.MODIFIED_BY_NAME,   NPSSTRRD.MODIFIED_DATE,   NPSSTRRD.STATUS,   NPSSTRRD.PROCESS_STATUS,NT.PROCESS_TYPE,   NPSSTRRD.SYSTEM_ID,   NPSSTRRD.SYSTEM_NAME,   NPSSTRRD.TENANT_ID,   NPSSTRRD.APP_ID,   NPSSTRRD.VERSION_NO,   TO_CHAR(NPSSTRRD.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC  from   NPSS_TRN_REQ_RESP_DTLS NPSSTRRD  inner join NPSS_TRANSACTIONS NT on   NPSSTRRD.UETR = NT.UETR) RR $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665903906193$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_16$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1681975219058~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1681975219058$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  distinct API_PROCESSING_SYSTEM,  API_PROCESS_STATUS,  API_STATUS,  row_num from  (  select   T.CREATED_DATE,   T.STATUS as API_STATUS,   T.PROCESS_STATUS as API_PROCESS_STATUS,   T.UETR,   T.PROCESS_NAME,   T.PROCESSING_SYSTEM as API_PROCESSING_SYSTEM,   T.ADDITIONAL_INFO,   T.TENANT_ID,   T.MODIFIED_DATE,   T.MODIFIED_DATE_UTC,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   T.CREATED_BY,   T.CREATED_BY_NAME,   T.SYSTEM_ID,   row_number() over( partition by t.uetr  order by   t.npsstpl_id desc) as row_num  from   NPSS_TRN_PROCESS_LOG T  left join TRANSACTION_SET TS on   T.NPSSTPL_ID = TS.TRN_ID   and T.DTT_CODE = TS.DTT_CODE where t.status in($SQ$OP_AC_MAND_VAL_FAILED$SQ$,$SQ$OP_AC_DUPL_VAL_FAILED$SQ$,$SQ$OP_AC_PCODE_VAL_FAILED$SQ$,$SQ$OP_AC_PBANK_VAL_FAILED$SQ$,$SQ$OP_P2P_SENDER_IBAN_FAILED$SQ$,$SQ$OP_P2P_PAYMENT_FAILED$SQ$,$SQ$OP_P2P_POSTING_FAILURE$SQ$,$SQ$OP_P2P_POSTING_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_UNFREEZED$SQ$,$SQ$OP_P2B_PAYMENT_FAILED$SQ$,$SQ$OP_P2B_FUND_RES_FAILURE$SQ$,$SQ$OP_P2B_FUND_RES_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_UNFR_FAILURE$SQ$,$SQ$OP_P2B_FUND_UNFR_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_AUTH_FAILURE$SQ$,$SQ$OP_P2B_FUND_AUTH_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_RESERVED$SQ$,$SQ$OP_P2P_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_P2B_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_INAU_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_AUTH_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_UNFREEZE_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_P2P_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_P2B_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_INAU_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_AUTH_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_UNFREEZE_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_P2P_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_P2B_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_INAU_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_AUTH_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_UNFREEZE_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_P2B_REV_POSTING_SUCCESS$SQ$,$SQ$OP_P2P_REV_POSTING_SUCCESS$SQ$) union  select   T.CREATED_DATE,   T.STATUS as API_STATUS,   T.PROCESS_STATUS as API_PROCESS_STATUS,   T.UETR,   T.PROCESS_NAME,   T.PROCESSING_SYSTEM as API_PROCESSING_SYSTEM,   T.ADDITIONAL_INFO,   T.TENANT_ID,   T.MODIFIED_DATE,   T.MODIFIED_DATE_UTC,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   T.CREATED_BY,   T.CREATED_BY_NAME,   T.SYSTEM_ID,   case    when t.status = $SQ$OP_AC_VAL_FAILED$SQ$ then 1   end as row_num  from   NPSS_TRN_PROCESS_LOG T  left join TRANSACTION_SET TS on   T.NPSSTPL_ID = TS.TRN_ID   and T.DTT_CODE = TS.DTT_CODE where t.status=$SQ$OP_AC_VAL_FAILED$SQ$) VW where  row_num = 1 $AND$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_23$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1686637362366~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1686637362366$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  PROCESS_STATUS,  STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DEPARTMENT_CODE,  DT_CODE,  DTT_CODE,  PROCESS_TYPE,  AMOUNT_CREDITED,  AMT_CR_LOC_CUR,  CHARGE_AMOUNT,  BUY_CURRENCY,  SELL_CURRENCY,  DEALT_AMOUNT,  EXCHANGE_RATE,  CONTRA_AMOUNT from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   NT.PROCESS_TYPE,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   NT.DEPARTMENT_CODE,   NT.NPSST_ID,   A.ADDITIONAL_INFO,   A.AMOUNT_CREDITED,   A.AMT_CR_LOC_CUR,   A.CHARGE_AMOUNT,   A.BUY_CURRENCY,   A.SELL_CURRENCY,   A.DEALT_AMOUNT,   A.EXCHANGE_RATE,   A.CONTRA_AMOUNT,   T24RC.ERROR_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.ERROR_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION  from   NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_ERROR_CODES T24RC on   T24RC.ERROR_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$  left join NPSS_TRANSACTIONS NT on   NT.UETR = A.UETR  order by   A.NPSSTPL_ID) V $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_27$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1681969013210~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1681969013210$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_8$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1681967889801~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1681967889801$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  PROCESS_STATUS,  STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DEPARTMENT_CODE,  DT_CODE,  DTT_CODE,  PROCESS_TYPE,  AMOUNT_CREDITED,  AMT_CR_LOC_CUR,  CHARGE_AMOUNT,  BUY_CURRENCY,  SELL_CURRENCY,  DEALT_AMOUNT,  EXCHANGE_RATE,  CONTRA_AMOUNT from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   NT.PROCESS_TYPE,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   NT.DEPARTMENT_CODE,   NT.NPSST_ID,   A.ADDITIONAL_INFO,   A.AMOUNT_CREDITED,   A.AMT_CR_LOC_CUR,   A.CHARGE_AMOUNT,   A.BUY_CURRENCY,   A.SELL_CURRENCY,   A.DEALT_AMOUNT,   A.EXCHANGE_RATE,   A.CONTRA_AMOUNT,   T24RC.ERROR_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.ERROR_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION  from   NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_ERROR_CODES T24RC on   T24RC.ERROR_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$  left join NPSS_TRANSACTIONS NT on   NT.UETR = A.UETR  order by   A.NPSSTPL_ID) V $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_18$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1681969017123~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1681969017123$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_9$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1681968843919~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1681968843919$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  Fn_card_decrypt_and_mask_rpt(cr_acct_identification) as cr_acct_identification_mask,  CR_ACCT_IDENTIFICATION,  UETR,  VALUE_DATE,  ACCP_DATE_TIME,  CREATED_DATE,  DATEMI,  EXHF_ID,  CDTR_IBAN,  TENANT_ID,  TRAN_REF_ID,  DEPARTMENT_CODE,  PAYMENT_ENDTOEND_ID,  CLRSYSREF,  CDTR_ACCT_NO,  DBTR_ACCT_NO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  STATUS,  PROCESSING_SYSTEM,  PROCESS_STATUS,  DBTR_ACCT_NAME,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  DBTR_CUST_TYPE,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  CDTR_ACCT_NAME,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  DR_SORT_CODE,  CR_SORT_CODE,  CATEGORY_PURPOSE,  CATEGORY_PURPOSE_PRTY,  BASE_CURRENCY,  BASE_AMOUNT,  HDR_TOTAL_RECORDS,  HDR_TOTAL_AMOUNT,  HDR_CLEARING_SYSTEM,  CHARGE_BEARER,  REMITTANCE_INFO,  ACCOUNT_CURRENCY,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  ISSUER_TYPE_CODE,  CBS_REF_NO,  CBS_POSTING_FLAG,  PROCESS_TYPE,  PROCESS_GROUP from  (  select   NT.NPSST_ID,   NT.UETR,   NT.VALUE_DATE,   NT.ACCP_DATE_TIME,   NT.CREATED_DATE,   TO_CHAR(NT.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   NT.DEPARTMENT_CODE,   NT.TENANT_ID,   NT.EXHF_ID,   NT.CDTR_IBAN,   NT.TRAN_REF_ID,   NT.PAYMENT_ENDTOEND_ID,   NT.CLRSYSREF,   NT.CDTR_ACCT_NO,   NT.DBTR_ACCT_NO,   NT.INTRBK_STTLM_CUR,   NT.INTRBK_STTLM_AMNT,   NT.STATUS,   NT.PROCESSING_SYSTEM,   NT.PROCESS_STATUS,   NT.DBTR_ACCT_NAME,   NT.DBTR_PHONE_NO,   NT.DBTR_EMAIL_ID,   NT.DBTR_DOCUMENT_ID,   NT.DBTR_IBAN,   NT.DBTR_CUST_TYPE,   NT.DBTR_PRVT_ID,   NT.DBTR_OTHER_ISSUER,   NT.CDTR_ACCT_NAME,   NT.CDTR_PHONE_NO,   NT.CDTR_EMAIL_ID,   NT.CDTR_DOCUMENT_ID,   NT.DR_SORT_CODE,   NT.CR_SORT_CODE,   NT.CATEGORY_PURPOSE,   NT.CATEGORY_PURPOSE_PRTY,   NT.CR_ACCT_IDENTIFICATION,   NT.BASE_CURRENCY,   NT.BASE_AMOUNT,   NT.HDR_TOTAL_RECORDS,   NT.HDR_TOTAL_AMOUNT,   NT.HDR_CLEARING_SYSTEM,   NT.CHARGE_BEARER,   NT.REMITTANCE_INFO,   NT.ACCOUNT_CURRENCY,   NT.CHANNEL_ID,   NT.CHANNEL_REFNO,   NT.CHANNEL_USERID,   NT.CHANNEL_PRODUCT,   NT.CHANNEL_SUB_PRODUCT,   NT.CHANNEL_TRAN_CODE,   NT.ISSUER_TYPE_CODE,   NT.CBS_REF_NO,   NT.CBS_POSTING_FLAG,   NT.PROCESS_TYPE,   NT.PROCESS_GROUP  from   NPSS_TRANSACTIONS NT ) V $WHERE order by  NPSST_ID desc$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_2$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1681969216071~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1681969216071$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  API_PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  API_PROCESS_STATUS,  API_STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DT_CODE,  DTT_CODE,  V_CODE,  DBTR_IBAN,  AMOUNT,  TRAN_REF_ID,  row_num from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM as API_PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS as API_PROCESS_STATUS,   A.STATUS as API_STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   A.ADDITIONAL_INFO,   A.V_CODE,   A.DBTR_IBAN,   A.AMOUNT,   A.TRAN_REF_ID,   T24RC.RETURN_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.RETURN_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION,   row_number() over( partition by a.uetr  order by   a.npsstpl_id desc) as row_num  from   NPSS_TRN_PROCESS_LOG A  left join $SL$$DQ$ad_gss_tran$SL$$DQ$.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join $SL$$DQ$ad_gss_tran$SL$$DQ$.CORE_NC_RETURN_CODES T24RC on   T24RC.RETURN_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join $SL$$DQ$ad_gss_tran$SL$$DQ$.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$ where a.status in ($SQ$OP_AC_MAND_VAL_FAILED$SQ$,$SQ$OP_AC_DUPL_VAL_FAILED$SQ$,$SQ$OP_AC_PCODE_VAL_FAILED$SQ$,$SQ$OP_AC_PBANK_VAL_FAILED$SQ$,$SQ$OP_P2P_SENDER_IBAN_FAILED$SQ$,$SQ$OP_P2P_PAYMENT_FAILED$SQ$,$SQ$OP_P2P_POSTING_FAILURE$SQ$,$SQ$OP_P2P_POSTING_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_UNFREEZED$SQ$,$SQ$OP_P2B_PAYMENT_FAILED$SQ$,$SQ$OP_P2B_FUND_RES_FAILURE$SQ$,$SQ$OP_P2B_FUND_RES_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_UNFR_FAILURE$SQ$,$SQ$OP_P2B_FUND_UNFR_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_AUTH_FAILURE$SQ$,$SQ$OP_P2B_FUND_AUTH_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_RESERVED$SQ$,$SQ$OP_P2P_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_P2B_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_INAU_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_AUTH_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_UNFREEZE_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_P2P_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_P2B_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_INAU_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_AUTH_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_UNFREEZE_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_P2P_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_P2B_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_INAU_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_AUTH_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_UNFREEZE_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_P2B_REV_POSTING_SUCCESS$SQ$,$SQ$OP_P2P_REV_POSTING_SUCCESS$SQ$) union  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM as API_PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS as API_PROCESS_STATUS,   A.STATUS as API_STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   A.ADDITIONAL_INFO,   A.V_CODE,   A.DBTR_IBAN,   A.AMOUNT,   A.TRAN_REF_ID,   T24RC.RETURN_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.RETURN_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION,   case    when a.status = $SQ$OP_AC_VAL_FAILED$SQ$ then 1   end as row_num  from   NPSS_TRN_PROCESS_LOG A  left join $SL$$DQ$ad_gss_tran$SL$$DQ$.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join $SL$$DQ$ad_gss_tran$SL$$DQ$.CORE_NC_RETURN_CODES T24RC on   T24RC.RETURN_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join $SL$$DQ$ad_gss_tran$SL$$DQ$.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$ where a.status = $SQ$OP_AC_VAL_FAILED$SQ$) V where  row_num = 1 $AND$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_20$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672537964_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1681968174506~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672537964_0$DQ$,$DQ$DS_1681968174506$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  distinct PROCESSING_SYSTEM,  PROCESS_STATUS from  (  select   NT.NPSST_ID,   NT.UETR,   NT.VALUE_DATE,   NT.ACCP_DATE_TIME,   NT.CREATED_DATE,   TO_CHAR(NT.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   NT.DEPARTMENT_CODE,   NT.TENANT_ID,   NT.EXHF_ID,   NT.CDTR_IBAN,   NT.TRAN_REF_ID,   NT.PAYMENT_ENDTOEND_ID,   NT.CLRSYSREF,   NT.CDTR_ACCT_NO,   NT.DBTR_ACCT_NO,   NT.INTRBK_STTLM_CUR,   NT.INTRBK_STTLM_AMNT,   NT.STATUS,   NT.PROCESSING_SYSTEM,   NT.PROCESS_STATUS,   NT.DBTR_ACCT_NAME,   NT.PROCESS_TYPE,   NT.DBTR_PHONE_NO,   NT.DBTR_EMAIL_ID,   NT.DBTR_DOCUMENT_ID,   NT.DBTR_IBAN,   NT.DBTR_CUST_TYPE,   NT.DBTR_PRVT_ID,   NT.DBTR_OTHER_ISSUER,   NT.CDTR_ACCT_NAME,   NT.CDTR_PHONE_NO,   NT.CDTR_EMAIL_ID,   NT.CDTR_DOCUMENT_ID,   NT.DR_SORT_CODE,   NT.CR_SORT_CODE,   NT.CATEGORY_PURPOSE,   NT.CATEGORY_PURPOSE_PRTY,   NT.CR_ACCT_IDENTIFICATION,   NT.BASE_CURRENCY,   NT.BASE_AMOUNT,   NT.HDR_TOTAL_RECORDS,   NT.HDR_TOTAL_AMOUNT,   NT.HDR_CLEARING_SYSTEM,   NT.CHARGE_BEARER,   NT.REMITTANCE_INFO,   NT.ACCOUNT_CURRENCY,   NT.CHANNEL_ID,   NT.CHANNEL_REFNO,   NT.CHANNEL_USERID,   NT.CHANNEL_PRODUCT,   NT.CHANNEL_SUB_PRODUCT,   NT.CHANNEL_TRAN_CODE,   NT.ISSUER_TYPE_CODE,   NT.CBS_REF_NO,   NT.CBS_POSTING_FLAG,   NT.PROCESS_GROUP  from   NPSS_TRANSACTIONS NT )v $WHERE order by  PROCESSING_SYSTEM,  PROCESS_STATUS$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_1$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672571097_0",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" DELETE FROM QRY_INFO WHERE WFTPA_ID=? AND APP_ID=?\", \"params\" : [\"WFT_NPSS_P_1304_1673672571097_0\", \"215\"] }",
  "qry_type": "D"
},{
  "key": "215~WFT_NPSS_P_1304_1673672571097_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665903906193~DS_1673674041342~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672571097_0$DQ$,$DQ$DS_1673674041342$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSSTRRD_ID,  MSG_ID,  UETR,  PARENT_NPSSTRRD_REFNO,  NPSSTRRD_REFNO,  PROCESS_CODE,  PROCESS_DETAIL,  EXHF_ID,  PROCESS_NAME,  MESSAGE_DESC,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  STATUS,  PROCESS_STATUS,PROCESS_TYPE,  MESSAGE_DATA,  CREATEDDATEMILISEC,  DT_CODE,  DTT_CODE from  (  select   NPSSTRRD.NPSSTRRD_ID,   NPSSTRRD.MSG_ID,   NPSSTRRD.UETR,   NPSSTRRD.PARENT_NPSSTRRD_REFNO,   NPSSTRRD.NPSSTRRD_REFNO,   NPSSTRRD.MESSAGE_DATA,   NPSSTRRD.PROCESS_CODE,   NPSSTRRD.PROCESS_DETAIL,   NPSSTRRD.EXHF_ID,   NPSSTRRD.PROCESS_NAME,   NPSSTRRD.MESSAGE_DESC,   NPSSTRRD.CHANNEL_ID,   NPSSTRRD.CHANNEL_REFNO,   NPSSTRRD.CHANNEL_USERID,   NPSSTRRD.CHANNEL_PRODUCT,   NPSSTRRD.CHANNEL_SUB_PRODUCT,   NPSSTRRD.CHANNEL_TRAN_CODE,   NPSSTRRD.CREATED_BY,   NPSSTRRD.CREATED_BY_NAME,   NPSSTRRD.CREATED_DATE,   NPSSTRRD.DT_CODE,   NPSSTRRD.DT_DESCRIPTION,   NPSSTRRD.DTT_CODE,   NPSSTRRD.DTT_DESCRIPTION,   NPSSTRRD.MODIFIED_BY,   NPSSTRRD.MODIFIED_BY_NAME,   NPSSTRRD.MODIFIED_DATE,   NPSSTRRD.STATUS,   NPSSTRRD.PROCESS_STATUS,NT.PROCESS_TYPE,   NPSSTRRD.SYSTEM_ID,   NPSSTRRD.SYSTEM_NAME,   NPSSTRRD.TENANT_ID,   NPSSTRRD.APP_ID,   NPSSTRRD.VERSION_NO,   TO_CHAR(NPSSTRRD.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC  from   NPSS_TRN_REQ_RESP_DTLS NPSSTRRD  inner join NPSS_TRANSACTIONS NT on   NPSSTRRD.UETR = NT.UETR) RR $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665903906193$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_16$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672571097_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1673674181080~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672571097_0$DQ$,$DQ$DS_1673674181080$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_8$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672571097_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1673674065067~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672571097_0$DQ$,$DQ$DS_1673674065067$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  distinct PROCESSING_SYSTEM,  PROCESS_STATUS from  (  select   NT.NPSST_ID,   NT.UETR,   NT.VALUE_DATE,   NT.ACCP_DATE_TIME,   NT.CREATED_DATE,   TO_CHAR(NT.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   NT.DEPARTMENT_CODE,   NT.TENANT_ID,   NT.EXHF_ID,   NT.CDTR_IBAN,   NT.TRAN_REF_ID,   NT.PAYMENT_ENDTOEND_ID,   NT.CLRSYSREF,   NT.CDTR_ACCT_NO,   NT.DBTR_ACCT_NO,   NT.INTRBK_STTLM_CUR,   NT.INTRBK_STTLM_AMNT,   NT.STATUS,   NT.PROCESSING_SYSTEM,   NT.PROCESS_STATUS,   NT.DBTR_ACCT_NAME,   NT.PROCESS_TYPE,   NT.DBTR_PHONE_NO,   NT.DBTR_EMAIL_ID,   NT.DBTR_DOCUMENT_ID,   NT.DBTR_IBAN,   NT.DBTR_CUST_TYPE,   NT.DBTR_PRVT_ID,   NT.DBTR_OTHER_ISSUER,   NT.CDTR_ACCT_NAME,   NT.CDTR_PHONE_NO,   NT.CDTR_EMAIL_ID,   NT.CDTR_DOCUMENT_ID,   NT.DR_SORT_CODE,   NT.CR_SORT_CODE,   NT.CATEGORY_PURPOSE,   NT.CATEGORY_PURPOSE_PRTY,   NT.CR_ACCT_IDENTIFICATION,   NT.BASE_CURRENCY,   NT.BASE_AMOUNT,   NT.HDR_TOTAL_RECORDS,   NT.HDR_TOTAL_AMOUNT,   NT.HDR_CLEARING_SYSTEM,   NT.CHARGE_BEARER,   NT.REMITTANCE_INFO,   NT.ACCOUNT_CURRENCY,   NT.CHANNEL_ID,   NT.CHANNEL_REFNO,   NT.CHANNEL_USERID,   NT.CHANNEL_PRODUCT,   NT.CHANNEL_SUB_PRODUCT,   NT.CHANNEL_TRAN_CODE,   NT.ISSUER_TYPE_CODE,   NT.CBS_REF_NO,   NT.CBS_POSTING_FLAG,   NT.PROCESS_GROUP  from   NPSS_TRANSACTIONS NT )v $WHERE order by  PROCESSING_SYSTEM,  PROCESS_STATUS$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_1$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672571097_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1673674127218~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672571097_0$DQ$,$DQ$DS_1673674127218$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  Fn_card_decrypt_and_mask_rpt(cr_acct_identification) as cr_acct_identification_mask,  CR_ACCT_IDENTIFICATION,  UETR,  VALUE_DATE,  ACCP_DATE_TIME,  CREATED_DATE,  DATEMI,  EXHF_ID,  CDTR_IBAN,  TENANT_ID,  TRAN_REF_ID,  DEPARTMENT_CODE,  PAYMENT_ENDTOEND_ID,  CLRSYSREF,  CDTR_ACCT_NO,  DBTR_ACCT_NO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  STATUS,  PROCESSING_SYSTEM,  PROCESS_STATUS,  DBTR_ACCT_NAME,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  DBTR_CUST_TYPE,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  CDTR_ACCT_NAME,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  DR_SORT_CODE,  CR_SORT_CODE,  CATEGORY_PURPOSE,  CATEGORY_PURPOSE_PRTY,  BASE_CURRENCY,  BASE_AMOUNT,  HDR_TOTAL_RECORDS,  HDR_TOTAL_AMOUNT,  HDR_CLEARING_SYSTEM,  CHARGE_BEARER,  REMITTANCE_INFO,  ACCOUNT_CURRENCY,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  ISSUER_TYPE_CODE,  CBS_REF_NO,  CBS_POSTING_FLAG,  PROCESS_TYPE,  PROCESS_GROUP from  (  select   NT.NPSST_ID,   NT.UETR,   NT.VALUE_DATE,   NT.ACCP_DATE_TIME,   NT.CREATED_DATE,   TO_CHAR(NT.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   NT.DEPARTMENT_CODE,   NT.TENANT_ID,   NT.EXHF_ID,   NT.CDTR_IBAN,   NT.TRAN_REF_ID,   NT.PAYMENT_ENDTOEND_ID,   NT.CLRSYSREF,   NT.CDTR_ACCT_NO,   NT.DBTR_ACCT_NO,   NT.INTRBK_STTLM_CUR,   NT.INTRBK_STTLM_AMNT,   NT.STATUS,   NT.PROCESSING_SYSTEM,   NT.PROCESS_STATUS,   NT.DBTR_ACCT_NAME,   NT.DBTR_PHONE_NO,   NT.DBTR_EMAIL_ID,   NT.DBTR_DOCUMENT_ID,   NT.DBTR_IBAN,   NT.DBTR_CUST_TYPE,   NT.DBTR_PRVT_ID,   NT.DBTR_OTHER_ISSUER,   NT.CDTR_ACCT_NAME,   NT.CDTR_PHONE_NO,   NT.CDTR_EMAIL_ID,   NT.CDTR_DOCUMENT_ID,   NT.DR_SORT_CODE,   NT.CR_SORT_CODE,   NT.CATEGORY_PURPOSE,   NT.CATEGORY_PURPOSE_PRTY,   NT.CR_ACCT_IDENTIFICATION,   NT.BASE_CURRENCY,   NT.BASE_AMOUNT,   NT.HDR_TOTAL_RECORDS,   NT.HDR_TOTAL_AMOUNT,   NT.HDR_CLEARING_SYSTEM,   NT.CHARGE_BEARER,   NT.REMITTANCE_INFO,   NT.ACCOUNT_CURRENCY,   NT.CHANNEL_ID,   NT.CHANNEL_REFNO,   NT.CHANNEL_USERID,   NT.CHANNEL_PRODUCT,   NT.CHANNEL_SUB_PRODUCT,   NT.CHANNEL_TRAN_CODE,   NT.ISSUER_TYPE_CODE,   NT.CBS_REF_NO,   NT.CBS_POSTING_FLAG,   NT.PROCESS_TYPE,   NT.PROCESS_GROUP  from   NPSS_TRANSACTIONS NT ) V $WHERE order by  NPSST_ID desc$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_2$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672571097_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1673674011822~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672571097_0$DQ$,$DQ$DS_1673674011822$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  PROCESS_STATUS,  STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DEPARTMENT_CODE,  DT_CODE,  DTT_CODE,  PROCESS_TYPE,  AMOUNT_CREDITED,  AMT_CR_LOC_CUR,  CHARGE_AMOUNT,  BUY_CURRENCY,  SELL_CURRENCY,  DEALT_AMOUNT,  EXCHANGE_RATE,  CONTRA_AMOUNT from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   NT.PROCESS_TYPE,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   NT.DEPARTMENT_CODE,   NT.NPSST_ID,   A.ADDITIONAL_INFO,   A.AMOUNT_CREDITED,   A.AMT_CR_LOC_CUR,   A.CHARGE_AMOUNT,   A.BUY_CURRENCY,   A.SELL_CURRENCY,   A.DEALT_AMOUNT,   A.EXCHANGE_RATE,   A.CONTRA_AMOUNT,   T24RC.ERROR_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.ERROR_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION  from   NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_ERROR_CODES T24RC on   T24RC.ERROR_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$  left join NPSS_TRANSACTIONS NT on   NT.UETR = A.UETR  order by   A.NPSSTPL_ID) V $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_18$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1673672571097_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1673674216432~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1673672571097_0$DQ$,$DQ$DS_1673674216432$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_9$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" DELETE FROM QRY_INFO WHERE WFTPA_ID=? AND APP_ID=?\", \"params\" : [\"WFT_NPSS_P_1304_1679488521228_0\", \"215\"] }",
  "qry_type": "D"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1679488758700~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1679488521228_0$DQ$,$DQ$DS_1679488758700$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  PROCESS_STATUS,  STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DEPARTMENT_CODE,  DT_CODE,  DTT_CODE,  PROCESS_TYPE,  AMOUNT_CREDITED,  AMT_CR_LOC_CUR,  CHARGE_AMOUNT,  BUY_CURRENCY,  SELL_CURRENCY,  DEALT_AMOUNT,  EXCHANGE_RATE,  CONTRA_AMOUNT from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   NT.PROCESS_TYPE,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   NT.DEPARTMENT_CODE,   NT.NPSST_ID,   A.ADDITIONAL_INFO,   A.AMOUNT_CREDITED,   A.AMT_CR_LOC_CUR,   A.CHARGE_AMOUNT,   A.BUY_CURRENCY,   A.SELL_CURRENCY,   A.DEALT_AMOUNT,   A.EXCHANGE_RATE,   A.CONTRA_AMOUNT,   T24RC.ERROR_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.ERROR_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION  from   NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_ERROR_CODES T24RC on   T24RC.ERROR_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$  left join NPSS_TRANSACTIONS NT on   NT.UETR = A.UETR  order by   A.NPSSTPL_ID) V $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_15$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0~E_1679496674604~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1679507302462~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1679488521228_0$DQ$,$DQ$DS_1679507302462$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when nt.process_status in ($SQ$RCTInProcess$SQ$, $SQ$RCTReturned$SQ$, $SQ$RCTCompleted$SQ$, $SQ$RCTExceptionFailure$SQ$, $SQ$RCTExceptionSuspicious$SQ$, $SQ$BCTInProcess$SQ$, $SQ$BCTReturned$SQ$, $SQ$BCTCompleted$SQ$, $SQ$BCTExceptionFailure$SQ$, $SQ$BCTExceptionSuspicious$SQ$) then $SQ$Payment Status$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$IP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.process_name = $SQ$Receive pacs002$SQ$ then $SQ$Final pacs002 status received$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$IP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.status in (UPPER($SQ$IP_RCT_POSTING_SUCCESS$SQ$)) then $SQ$Posting Completed to T24$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$IP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.status in (UPPER($SQ$IP_RCT_PC_POSTING_SUCCESS$SQ$)) then $SQ$Posting Completed to Elpaso$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$IP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.status in (UPPER($SQ$IP_RCT_CC_POSTING_SUCCESS$SQ$)) then $SQ$Posting Completed to FD$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$IP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when NTPL.process_name = $SQ$Place pacs002$SQ$ then $SQ$Response sent to CB$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$IP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.status in (UPPER($SQ$IP_RCT_PC_POSTING_FAILURE$SQ$), UPPER($SQ$IP_RCT_POSTING_SUSPICIOUS$SQ$), UPPER($SQ$IP_RCT_POSTING_FAILURE$SQ$),($SQ$IP_RCT_CC_POSTING_FAILURE$SQ$), UPPER($SQ$IP_RCT_PC_POSTING_SUSPICIOUS$SQ$), UPPER($SQ$IP_RCT_CC_POSTING_SUSPICIOUS$SQ$)) then $SQ$Repair Queue$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$IP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$E_1679496674604$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_14$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665903906193~DS_1679492509321~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1679488521228_0$DQ$,$DQ$DS_1679492509321$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSSTRRD_ID,  MSG_ID,  UETR,  PARENT_NPSSTRRD_REFNO,  NPSSTRRD_REFNO,  PROCESS_CODE,  PROCESS_DETAIL,  EXHF_ID,  PROCESS_NAME,  MESSAGE_DESC,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  STATUS,  PROCESS_STATUS,PROCESS_TYPE,  MESSAGE_DATA,  CREATEDDATEMILISEC,  DT_CODE,  DTT_CODE from  (  select   NPSSTRRD.NPSSTRRD_ID,   NPSSTRRD.MSG_ID,   NPSSTRRD.UETR,   NPSSTRRD.PARENT_NPSSTRRD_REFNO,   NPSSTRRD.NPSSTRRD_REFNO,   NPSSTRRD.MESSAGE_DATA,   NPSSTRRD.PROCESS_CODE,   NPSSTRRD.PROCESS_DETAIL,   NPSSTRRD.EXHF_ID,   NPSSTRRD.PROCESS_NAME,   NPSSTRRD.MESSAGE_DESC,   NPSSTRRD.CHANNEL_ID,   NPSSTRRD.CHANNEL_REFNO,   NPSSTRRD.CHANNEL_USERID,   NPSSTRRD.CHANNEL_PRODUCT,   NPSSTRRD.CHANNEL_SUB_PRODUCT,   NPSSTRRD.CHANNEL_TRAN_CODE,   NPSSTRRD.CREATED_BY,   NPSSTRRD.CREATED_BY_NAME,   NPSSTRRD.CREATED_DATE,   NPSSTRRD.DT_CODE,   NPSSTRRD.DT_DESCRIPTION,   NPSSTRRD.DTT_CODE,   NPSSTRRD.DTT_DESCRIPTION,   NPSSTRRD.MODIFIED_BY,   NPSSTRRD.MODIFIED_BY_NAME,   NPSSTRRD.MODIFIED_DATE,   NPSSTRRD.STATUS,   NPSSTRRD.PROCESS_STATUS,NT.PROCESS_TYPE,   NPSSTRRD.SYSTEM_ID,   NPSSTRRD.SYSTEM_NAME,   NPSSTRRD.TENANT_ID,   NPSSTRRD.APP_ID,   NPSSTRRD.VERSION_NO,   TO_CHAR(NPSSTRRD.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC  from   NPSS_TRN_REQ_RESP_DTLS NPSSTRRD  inner join NPSS_TRANSACTIONS NT on   NPSSTRRD.UETR = NT.UETR) RR $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665903906193$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_20$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1679497533134~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1679488521228_0$DQ$,$DQ$DS_1679497533134$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  X.RESPONSE_DETAIL,  x.RESPONSE_DETAIL_COUNT,  X.PROCESS_TYPE,  x.createddate,  X.processgroup from  (  select   res.PROCESS_TYPE,   res.createddate,   coalesce(sum(res.Total), 0::numeric) as Total,   coalesce(sum(res.ACK_response_received_from_CB), 0::numeric) as ACK_response_received_from_CB,   coalesce(sum(res.NAK_Response_received_from_CB), 0::numeric) as NAK_Response_received_from_CB,   coalesce(sum(res.Accepted_by_Bene_Bank), 0::numeric) as Accepted_by_Bene_Bank,   coalesce(sum(res.Rejected_by_Bene), 0::numeric) as Rejected_by_Bene,   coalesce(sum(res.Posting_Completed), 0::numeric) as Posting_Completed,   coalesce(sum(res.Send_to_CB), 0::numeric) as Send_to_CB,   coalesce(sum(res.CB_ACK), 0::numeric) as CB_ACK,   coalesce(sum(res.CB_NACK), 0::numeric) as CB_NACK,   res.processgroup  from   (select     count(distinct case when res1.process_type = $SQ$OP$SQ$ then res1.npsst_id end) as Total,     count(distinct case when res1.response_code = UPPER($SQ$ACCP$SQ$) and res1.cbuae_return_code is null then res1.npsst_id end) as ACK_response_received_from_CB,     count(distinct case when res1.response_code = UPPER($SQ$RJCT$SQ$) and res1.cbuae_return_code is null then res1.npsst_id end) as NAK_Response_received_from_CB,     count(distinct case when res1.response_code = UPPER($SQ$ACCP$SQ$) and res1.cbuae_return_code is not null and res1.process_name not in ($SQ$Receive pacs004$SQ$) then res1.npsst_id end) as Accepted_by_Bene_Bank,     count(distinct case when res1.response_code = UPPER($SQ$RJCT$SQ$) and res1.cbuae_return_code is not null then res1.npsst_id end) as Rejected_by_Bene,     count(distinct case when res1.status in (UPPER($SQ$OP_P2P_POSTING_SUCCESS$SQ$), UPPER($SQ$OP_P2B_FUND_AUTHORIZED$SQ$)) then res1.npsst_id end) as Posting_Completed,     count(distinct case when res1.process_status in ($SQ$RCTCompleted$SQ$, $SQ$RCTReturned$SQ$) and res1.process_name = $SQ$Place Pacs008$SQ$ then res1.npsst_id end) as Send_to_CB,     count(distinct case when res1.status in (UPPER($SQ$OP_AC_STATUS_ACCEPTED$SQ$), UPPER($SQ$OP_P2P_STATUS_ACCEPTED$SQ$), UPPER($SQ$OP_P2B_STATUS_ACCEPTED$SQ$)) then res1.npsst_id end) as CB_ACK,     count(distinct case when res1.status in (UPPER($SQ$OP_AC_REV_POSTING_SUCCESS$SQ$), UPPER($SQ$OP_AC_STATUS_REJECTED$SQ$), UPPER($SQ$OP_P2B_STATUS_REJECTED$SQ$), UPPER($SQ$OP_P2B_REV_POSTING_SUCCESS$SQ$), UPPER($SQ$OP_P2P_STATUS_REJECTED$SQ$), UPPER($SQ$OP_P2P_REV_POSTING_SUCCESS$SQ$)) then res1.npsst_id end) as CB_NACK,    processgroup,    CREATED_DATE,    TENANT_ID,    DEPARTMENT_CODE,    PROCESS_TYPE,    createddate   from    (    select    nt.npsst_id,     NT.CREATED_DATE,     NT.TENANT_ID,     case      when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$      when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$     end as processgroup,     NT.department_code,     NT.process_type,     NT.uetr,     ntpl.response_code,     ntpl.process_status,     ntpl.status,     ntpl.process_name,     ntpl.cbuae_return_code,     to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate    from     npss_trn_process_log ntpl    inner join npss_transactions nt on     NT.uetr = NTPL.uetr    where     NT.process_type = $SQ$OP$SQ$) res1    group by     res1.CREATED_DATE,     res1.TENANT_ID,     res1.processgroup,     res1.department_code,     res1.process_type,     res1.createddate     )res $WHERE group by   res.PROCESS_TYPE,   res.createddate,   res.processgroup) T cross join lateral( values ($SQ$Total$SQ$, T.TOTAL, T.PROCESS_TYPE, t.createddate, T.processgroup), ($SQ$ACK response received from CB$SQ$, T.ACK_response_received_from_CB, T.PROCESS_TYPE, t.createddate, T.processgroup), ($SQ$NAK response received from CB$SQ$, T.NAK_Response_received_from_CB, T.PROCESS_TYPE, t.createddate, T.processgroup), ($SQ$Accepted by Bene Bank$SQ$, T.Accepted_by_Bene_Bank, T.PROCESS_TYPE, t.createddate, T.processgroup), ($SQ$Rejected by Bene$SQ$, T.Rejected_by_Bene, T.PROCESS_TYPE, t.createddate, T.processgroup), ($SQ$Posting Completed$SQ$, T.Posting_Completed, T.PROCESS_TYPE, t.createddate, T.processgroup), ($SQ$Send to CB$SQ$, T.Send_to_CB, T.PROCESS_TYPE, t.createddate, T.processgroup), ($SQ$CB ACK$SQ$, T.CB_ACK, T.PROCESS_TYPE, t.createddate, T.processgroup), ($SQ$CB NACK$SQ$, T.CB_NACK, T.PROCESS_TYPE, t.createddate, T.processgroup)) X (RESPONSE_DETAIL,  RESPONSE_DETAIL_COUNT,  PROCESS_TYPE,  createddate,processgroup)$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_39$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1679492808309~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1679488521228_0$DQ$,$DQ$DS_1679492808309$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_26$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1679505830432~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1679488521228_0$DQ$,$DQ$DS_1679505830432$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  X.RESPONSE_DETAIL,  x.RESPONSE_DETAIL_COUNT,  X.PROCESS_TYPE,  x.createddate,  x.processgroup from  (  select   res.PROCESS_TYPE,   res.createddate,   res.processgroup,   coalesce(sum(res.Payment_Status), 0::numeric) as Payment_Status,   coalesce(sum(res.Final_pacs002_status_received), 0::numeric) as Final_pacs002_status_received,   coalesce(sum(res.Posting_Completed_to_T24), 0::numeric) as Posting_Completed_to_T24,   coalesce(sum(res.Posting_Completed_to_Elpaso), 0::numeric) as Posting_Completed_to_Elpaso,   coalesce(sum(res.Posting_Completed_to_FD), 0::numeric) as Posting_Completed_to_FD,   coalesce(sum(res.response_sent_to_CB_count), 0::numeric) as response_sent_to_CB_count,   coalesce(sum(res.repair_queue), 0::numeric) as repair_queue  from   (select     count(distinct case when res1.process_status in ($SQ$RCTInProcess$SQ$, $SQ$RCTReturned$SQ$, $SQ$RCTCompleted$SQ$, $SQ$RCTExceptionFailure$SQ$, $SQ$RCTExceptionSuspicious$SQ$, $SQ$BCTInProcess$SQ$, $SQ$BCTReturned$SQ$, $SQ$BCTCompleted$SQ$, $SQ$BCTExceptionFailure$SQ$, $SQ$BCTExceptionSuspicious$SQ$) then res1.npsst_id end) as Payment_Status,    count(distinct case when res1.process_name = $SQ$Receive pacs002$SQ$ then res1.npsst_id end) as Final_pacs002_status_received,    count(distinct case when res1.status in (UPPER($SQ$IP_RCT_POSTING_SUCCESS$SQ$)) then res1.npsst_id end) as Posting_Completed_to_T24,    count(distinct case when res1.status in (UPPER($SQ$IP_RCT_PC_POSTING_SUCCESS$SQ$)) then res1.npsst_id end) as Posting_Completed_to_Elpaso,    count(distinct case when res1.status in (UPPER($SQ$IP_RCT_CC_POSTING_SUCCESS$SQ$)) then res1.npsst_id end) as Posting_Completed_to_FD,    count(distinct case when res1.process_name = $SQ$Place pacs002$SQ$ then res1.npsst_id end) as response_sent_to_CB_count,    count(distinct case when res1.status in (UPPER($SQ$IP_RCT_PC_POSTING_FAILURE$SQ$), UPPER($SQ$IP_RCT_POSTING_SUSPICIOUS$SQ$), UPPER($SQ$IP_RCT_POSTING_FAILURE$SQ$),($SQ$IP_RCT_CC_POSTING_FAILURE$SQ$), UPPER($SQ$IP_RCT_PC_POSTING_SUSPICIOUS$SQ$), UPPER($SQ$IP_RCT_CC_POSTING_SUSPICIOUS$SQ$)) then res1.npsst_id end) as repair_queue,    res1.CREATED_DATE,    res1.TENANT_ID,    res1.processgroup,    res1.department_code,    res1.process_type,    res1.createddate    from(   select    NT.CREATED_DATE,    NT.TENANT_ID,    case     when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$     when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$    end as processgroup,    NT.department_code,    NT.process_type,    NT.uetr,    NT.npsst_id,    NTPL.process_name,    NTPL.process_status,    ntpl.status,    to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate   from    npss_trn_process_log ntpl   inner join npss_transactions nt on    NT.uetr = NTPL.uetr   where    NT.process_type = $SQ$IP$SQ$)res1   group by    res1.CREATED_DATE,    res1.TENANT_ID,    res1.processgroup,    res1.department_code,    res1.process_type,    res1.createddate) res $WHERE  group by   res.PROCESS_TYPE,   res.createddate,   res.processgroup) T cross join lateral( values ($SQ$Payment Status$SQ$,T.PAYMENT_STATUS,T.PROCESS_TYPE,t.createddate,t.processgroup), ($SQ$Final pacs002 status received$SQ$,T.Final_pacs002_status_received,T.PROCESS_TYPE,t.createddate,t.processgroup), ($SQ$Posting Completed to T24$SQ$,T.Posting_Completed_to_T24,T.PROCESS_TYPE,t.createddate,t.processgroup), ($SQ$Posting Completed to Elpaso$SQ$,T.Posting_Completed_to_Elpaso,T.PROCESS_TYPE,t.createddate,t.processgroup), ($SQ$Posting Completed to FD$SQ$,T.Posting_Completed_to_FD,T.PROCESS_TYPE,t.createddate,t.processgroup), ($SQ$Response sent to CB$SQ$,T.response_sent_to_CB_count,T.PROCESS_TYPE,t.createddate,t.processgroup), ($SQ$Repair Queue$SQ$,T.repair_queue,T.PROCESS_TYPE,t.createddate,t.processgroup) ) X (RESPONSE_DETAIL,  RESPONSE_DETAIL_COUNT,  PROCESS_TYPE,  createddate,processgroup)$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_38$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0~E_1679496970198~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1679498847709~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1679488521228_0$DQ$,$DQ$DS_1679498847709$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification ,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when NT.process_type in ($SQ$OP$SQ$) then $SQ$Total$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$OP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification ,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.response_code = UPPER($SQ$RJCT$SQ$)     and ntpl.cbuae_return_code is null then $SQ$NAK response received from CB$SQ$     else $SQ$OTHER$SQ$    end as RESPONSE_DETAIL   from    npss_transactions nt   inner join npss_trn_process_log ntpl on    ntpl.uetr = nt.uetr   inner join (    select     plr.npsstpl_id,     plr.uetr,     plr.created_date,     plr.row_num    from     (     select      a.npsstpl_id,      a.uetr,      a.created_date,      row_number() over( partition by a.uetr     order by      a.npsstpl_id desc) as row_num     from      npss_trn_process_log a ) plr    where     plr.row_num = 1) pl on    pl.uetr = nt.uetr   inner join (    select     plr1.npsstpl_id,     plr1.uetr,     plr1.created_date,     plr1.row_num    from     (     select      a1.npsstpl_id,      a1.uetr,      a1.created_date,      row_number() over( partition by a1.uetr     order by      a1.npsstpl_id asc) as row_num     from      npss_trn_process_log a1 ) plr1    where     plr1.row_num = 1) pl1 on    pl1.uetr = nt.uetr   where    NT.process_type = $SQ$OP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification ,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.response_code = UPPER($SQ$ACCP$SQ$)     and ntpl.cbuae_return_code is null then $SQ$ACK response received from CB$SQ$     else $SQ$OTHER$SQ$    end as RESPONSE_DETAIL   from    npss_transactions nt   inner join npss_trn_process_log ntpl on    ntpl.uetr = nt.uetr   inner join (    select     plr.npsstpl_id,     plr.uetr,     plr.created_date,     plr.row_num    from     (     select      a.npsstpl_id,      a.uetr,      a.created_date,      row_number() over( partition by a.uetr     order by      a.npsstpl_id desc) as row_num     from      npss_trn_process_log a ) plr    where     plr.row_num = 1) pl on    pl.uetr = nt.uetr   inner join (    select     plr1.npsstpl_id,     plr1.uetr,     plr1.created_date,     plr1.row_num    from     (     select      a1.npsstpl_id,      a1.uetr,      a1.created_date,      row_number() over( partition by a1.uetr     order by      a1.npsstpl_id asc) as row_num     from      npss_trn_process_log a1 ) plr1    where     plr1.row_num = 1) pl1 on    pl1.uetr = nt.uetr   where    NT.process_type = $SQ$OP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification ,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.response_code = UPPER($SQ$ACCP$SQ$)     and ntpl.cbuae_return_code is not null     and ntpl.process_name not in ($SQ$Receive pacs004$SQ$) then $SQ$Accepted by Bene Bank$SQ$     else $SQ$OTHER$SQ$    end as RESPONSE_DETAIL   from    npss_transactions nt   inner join npss_trn_process_log ntpl on    ntpl.uetr = nt.uetr   inner join (    select     plr.npsstpl_id,     plr.uetr,     plr.created_date,     plr.row_num    from     (     select      a.npsstpl_id,      a.uetr,      a.created_date,      row_number() over( partition by a.uetr     order by      a.npsstpl_id desc) as row_num     from      npss_trn_process_log a ) plr    where     plr.row_num = 1) pl on    pl.uetr = nt.uetr   inner join (    select     plr1.npsstpl_id,     plr1.uetr,     plr1.created_date,     plr1.row_num    from     (     select      a1.npsstpl_id,      a1.uetr,      a1.created_date,      row_number() over( partition by a1.uetr     order by      a1.npsstpl_id asc) as row_num     from      npss_trn_process_log a1 ) plr1    where     plr1.row_num = 1) pl1 on    pl1.uetr = nt.uetr   where    NT.process_type = $SQ$OP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification ,   dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.response_code = UPPER($SQ$RJCT$SQ$)     and ntpl.cbuae_return_code is not null then $SQ$Rejected by Bene$SQ$     else $SQ$OTHER$SQ$    end as RESPONSE_DETAIL   from    npss_transactions nt   inner join npss_trn_process_log ntpl on    ntpl.uetr = nt.uetr   inner join (    select     plr.npsstpl_id,     plr.uetr,     plr.created_date,     plr.row_num    from     (     select      a.npsstpl_id,      a.uetr,      a.created_date,      row_number() over( partition by a.uetr     order by      a.npsstpl_id desc) as row_num     from      npss_trn_process_log a ) plr    where     plr.row_num = 1) pl on    pl.uetr = nt.uetr   inner join (    select     plr1.npsstpl_id,     plr1.uetr,     plr1.created_date,     plr1.row_num    from     (     select      a1.npsstpl_id,      a1.uetr,      a1.created_date,      row_number() over( partition by a1.uetr     order by      a1.npsstpl_id asc) as row_num     from      npss_trn_process_log a1 ) plr1    where     plr1.row_num = 1) pl1 on    pl1.uetr = nt.uetr   where    NT.process_type = $SQ$OP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification ,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when NT.process_status in ($SQ$RCTCompleted$SQ$, $SQ$RCTReturned$SQ$)     and NTPL.process_name = $SQ$Place Pacs008$SQ$ then $SQ$Send to CB$SQ$     else $SQ$OTHER$SQ$    end as RESPONSE_DETAIL   from    npss_transactions nt   inner join npss_trn_process_log ntpl on    ntpl.uetr = nt.uetr   inner join (    select     plr.npsstpl_id,     plr.uetr,     plr.created_date,     plr.row_num    from     (     select      a.npsstpl_id,      a.uetr,      a.created_date,      row_number() over( partition by a.uetr     order by      a.npsstpl_id desc) as row_num     from      npss_trn_process_log a ) plr    where     plr.row_num = 1) pl on    pl.uetr = nt.uetr   inner join (    select     plr1.npsstpl_id,     plr1.uetr,     plr1.created_date,     plr1.row_num    from     (     select      a1.npsstpl_id,      a1.uetr,      a1.created_date,      row_number() over( partition by a1.uetr     order by      a1.npsstpl_id asc) as row_num     from      npss_trn_process_log a1 ) plr1    where     plr1.row_num = 1) pl1 on    pl1.uetr = nt.uetr   where    NT.process_type = $SQ$OP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND union select  distinct npsst_id,  department_code ,  uetr,  created_date,  process_type,  createddate,  start_date,  end_date,  process_group,  processgroup,  RESPONSE_DETAIL,  intrbk_sttlm_cur ,  intrbk_sttlm_amnt ,  cdtr_iban ,  fn_card_decrypt_and_mask(cr_acct_identification, $PCIDSS_KEY) as cr_acct_identification ,  dbtr_iban from  (  select   nt.npsst_id,   nt.department_code ,   nt.UETR,   nt.created_date ,   nt.process_type ,   nt.intrbk_sttlm_cur ,   nt.intrbk_sttlm_amnt ,   nt.cdtr_iban ,   nt.cr_acct_identification ,   nt.dbtr_iban,   nt.tenant_id,   to_char(nt.created_date::timestamp with time zone, $SQ$yyyy-mm-dd$SQ$::text)::timestamp without time zone as createddate,   TO_CHAR(pl1.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as start_date,   TO_CHAR(pl.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as end_date,   NT.process_group,   case    when nt.process_status like UPPER($SQ$RCT%$SQ$) then $SQ$Online$SQ$    when nt.process_status like UPPER($SQ$BCT%$SQ$) then $SQ$Batch$SQ$   end as processgroup,   ntpl.process_name,   case    when ntpl.status in (UPPER($SQ$OP_P2P_POSTING_SUCCESS$SQ$), UPPER($SQ$OP_P2B_FUND_AUTHORIZED$SQ$)) then $SQ$Posting Completed$SQ$    when ntpl.status in (UPPER($SQ$OP_AC_STATUS_ACCEPTED$SQ$), UPPER($SQ$OP_P2P_STATUS_ACCEPTED$SQ$), UPPER($SQ$OP_P2B_STATUS_ACCEPTED$SQ$)) then $SQ$CB ACK$SQ$    when ntpl.status in (UPPER($SQ$OP_AC_REV_POSTING_SUCCESS$SQ$), UPPER($SQ$OP_AC_STATUS_REJECTED$SQ$), UPPER($SQ$OP_P2B_STATUS_REJECTED$SQ$), UPPER($SQ$OP_P2B_REV_POSTING_SUCCESS$SQ$), UPPER($SQ$OP_P2P_STATUS_REJECTED$SQ$), UPPER($SQ$OP_P2P_REV_POSTING_SUCCESS$SQ$)) then $SQ$CB NACK$SQ$    else $SQ$OTHER$SQ$   end as RESPONSE_DETAIL  from   npss_transactions nt  inner join npss_trn_process_log ntpl on   ntpl.uetr = nt.uetr  inner join (   select    plr.npsstpl_id,    plr.uetr,    plr.created_date,    plr.row_num   from    (    select     a.npsstpl_id,     a.uetr,     a.created_date,     row_number() over( partition by a.uetr    order by     a.npsstpl_id desc) as row_num    from     npss_trn_process_log a ) plr   where    plr.row_num = 1) pl on   pl.uetr = nt.uetr  inner join (   select    plr1.npsstpl_id,    plr1.uetr,    plr1.created_date,    plr1.row_num   from    (    select     a1.npsstpl_id,     a1.uetr,     a1.created_date,     row_number() over( partition by a1.uetr    order by     a1.npsstpl_id asc) as row_num    from     npss_trn_process_log a1 ) plr1   where    plr1.row_num = 1) pl1 on   pl1.uetr = nt.uetr  where   NT.process_type = $SQ$OP$SQ$) v where  RESPONSE_DETAIL <> $SQ$OTHER$SQ$ $AND$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$E_1679496970198$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_14$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1679488521228_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1679492913259~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1679488521228_0$DQ$,$DQ$DS_1679492913259$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_27$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" DELETE FROM QRY_INFO WHERE WFTPA_ID=? AND APP_ID=?\", \"params\" : [\"WFT_NPSS_P_1304_1686721810940_0\", \"215\"] }",
  "qry_type": "D"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1686744074239~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686744074239$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  API_PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  API_PROCESS_STATUS,  API_STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DT_CODE,  DTT_CODE,  V_CODE,  DBTR_IBAN,  AMOUNT,  TRAN_REF_ID,  row_num from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM as API_PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS as API_PROCESS_STATUS,   A.STATUS as API_STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   A.ADDITIONAL_INFO,   A.V_CODE,   A.DBTR_IBAN,   A.AMOUNT,   A.TRAN_REF_ID,   T24RC.RETURN_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.RETURN_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION,   row_number() over( partition by a.uetr  order by   a.npsstpl_id desc) as row_num  from   <arc_tran_db>.NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES T24RC on   T24RC.RETURN_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$ where a.status in ($SQ$OP_AC_MAND_VAL_FAILED$SQ$,$SQ$OP_AC_DUPL_VAL_FAILED$SQ$,$SQ$OP_AC_PCODE_VAL_FAILED$SQ$,$SQ$OP_AC_PBANK_VAL_FAILED$SQ$,$SQ$OP_P2P_SENDER_IBAN_FAILED$SQ$,$SQ$OP_P2P_PAYMENT_FAILED$SQ$,$SQ$OP_P2P_POSTING_FAILURE$SQ$,$SQ$OP_P2P_POSTING_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_UNFREEZED$SQ$,$SQ$OP_P2B_PAYMENT_FAILED$SQ$,$SQ$OP_P2B_FUND_RES_FAILURE$SQ$,$SQ$OP_P2B_FUND_RES_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_UNFR_FAILURE$SQ$,$SQ$OP_P2B_FUND_UNFR_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_AUTH_FAILURE$SQ$,$SQ$OP_P2B_FUND_AUTH_SUSPICIOUS$SQ$,$SQ$OP_P2B_FUND_RESERVED$SQ$,$SQ$OP_P2P_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_P2B_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_INAU_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_AUTH_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_UNFREEZE_DEBIT_POSTING_SUCCESS$SQ$,$SQ$OP_P2P_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_P2B_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_INAU_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_AUTH_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_UNFREEZE_DEBIT_POSTING_SUSCIPIOUS$SQ$,$SQ$OP_P2P_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_P2B_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_INAU_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_AUTH_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_UNFREEZE_POSTING_NOT_HAPPENED$SQ$,$SQ$OP_P2B_REV_POSTING_SUCCESS$SQ$,$SQ$OP_P2P_REV_POSTING_SUCCESS$SQ$) union  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM as API_PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS as API_PROCESS_STATUS,   A.STATUS as API_STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   A.ADDITIONAL_INFO,   A.V_CODE,   A.DBTR_IBAN,   A.AMOUNT,   A.TRAN_REF_ID,   T24RC.RETURN_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.RETURN_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION,   case    when a.status = $SQ$OP_AC_VAL_FAILED$SQ$ then 1   end as row_num  from <arc_tran_db>.NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES T24RC on   T24RC.RETURN_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$ where a.status = $SQ$OP_AC_VAL_FAILED$SQ$) V where  row_num = 1 $AND$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_20$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1686724342380~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686724342380$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   <arc_tran_db>.NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_9$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1686743999207~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686743999207$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  distinct API_PROCESSING_SYSTEM,  API_PROCESS_STATUS,  API_STATUS,  row_num from  (  select   T.CREATED_DATE,   T.STATUS as API_STATUS,   T.PROCESS_STATUS as API_PROCESS_STATUS,   T.UETR,   T.PROCESS_NAME,   T.PROCESSING_SYSTEM as API_PROCESSING_SYSTEM,   T.ADDITIONAL_INFO,   T.TENANT_ID,   T.MODIFIED_DATE,   T.MODIFIED_DATE_UTC,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   T.CREATED_BY,   T.CREATED_BY_NAME,   T.SYSTEM_ID,   row_number() over( partition by t.uetr  order by   t.npsstpl_id desc) as row_num  from   <arc_tran_db>.NPSS_TRN_PROCESS_LOG T  left join TRANSACTION_SET TS on   T.NPSSTPL_ID = TS.TRN_ID   and T.DTT_CODE = TS.DTT_CODE  where   t.status in($SQ$OP_AC_MAND_VAL_FAILED$SQ$, $SQ$OP_AC_DUPL_VAL_FAILED$SQ$, $SQ$OP_AC_PCODE_VAL_FAILED$SQ$, $SQ$OP_AC_PBANK_VAL_FAILED$SQ$, $SQ$OP_P2P_SENDER_IBAN_FAILED$SQ$, $SQ$OP_P2P_PAYMENT_FAILED$SQ$, $SQ$OP_P2P_POSTING_FAILURE$SQ$, $SQ$OP_P2P_POSTING_SUSPICIOUS$SQ$, $SQ$OP_P2B_FUND_UNFREEZED$SQ$, $SQ$OP_P2B_PAYMENT_FAILED$SQ$, $SQ$OP_P2B_FUND_RES_FAILURE$SQ$, $SQ$OP_P2B_FUND_RES_SUSPICIOUS$SQ$, $SQ$OP_P2B_FUND_UNFR_FAILURE$SQ$, $SQ$OP_P2B_FUND_UNFR_SUSPICIOUS$SQ$, $SQ$OP_P2B_FUND_AUTH_FAILURE$SQ$, $SQ$OP_P2B_FUND_AUTH_SUSPICIOUS$SQ$, $SQ$OP_P2B_FUND_RESERVED$SQ$, $SQ$OP_P2P_DEBIT_POSTING_SUCCESS$SQ$, $SQ$OP_P2B_DEBIT_POSTING_SUCCESS$SQ$, $SQ$OP_INAU_DEBIT_POSTING_SUCCESS$SQ$, $SQ$OP_AUTH_DEBIT_POSTING_SUCCESS$SQ$, $SQ$OP_UNFREEZE_DEBIT_POSTING_SUCCESS$SQ$, $SQ$OP_P2P_DEBIT_POSTING_SUSCIPIOUS$SQ$, $SQ$OP_P2B_DEBIT_POSTING_SUSCIPIOUS$SQ$, $SQ$OP_INAU_DEBIT_POSTING_SUSCIPIOUS$SQ$, $SQ$OP_AUTH_DEBIT_POSTING_SUSCIPIOUS$SQ$, $SQ$OP_UNFREEZE_DEBIT_POSTING_SUSCIPIOUS$SQ$, $SQ$OP_P2P_POSTING_NOT_HAPPENED$SQ$, $SQ$OP_P2B_POSTING_NOT_HAPPENED$SQ$, $SQ$OP_INAU_POSTING_NOT_HAPPENED$SQ$, $SQ$OP_AUTH_POSTING_NOT_HAPPENED$SQ$, $SQ$OP_UNFREEZE_POSTING_NOT_HAPPENED$SQ$, $SQ$OP_P2B_REV_POSTING_SUCCESS$SQ$, $SQ$OP_P2P_REV_POSTING_SUCCESS$SQ$) union  select   T.CREATED_DATE,   T.STATUS as API_STATUS,   T.PROCESS_STATUS as API_PROCESS_STATUS,   T.UETR,   T.PROCESS_NAME,   T.PROCESSING_SYSTEM as API_PROCESSING_SYSTEM,   T.ADDITIONAL_INFO,   T.TENANT_ID,   T.MODIFIED_DATE,   T.MODIFIED_DATE_UTC,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   T.CREATED_BY,   T.CREATED_BY_NAME,   T.SYSTEM_ID,   case    when t.status = $SQ$OP_AC_VAL_FAILED$SQ$ then 1   end as row_num  from   <arc_tran_db>.NPSS_TRN_PROCESS_LOG T  left join TRANSACTION_SET TS on   T.NPSSTPL_ID = TS.TRN_ID   and T.DTT_CODE = TS.DTT_CODE  where   t.status = $SQ$OP_AC_VAL_FAILED$SQ$) VW where  row_num = 1 $AND$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_23$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665903906193~DS_1686724133333~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686724133333$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSSTRRD_ID,  MSG_ID,  UETR,  PARENT_NPSSTRRD_REFNO,  NPSSTRRD_REFNO,  PROCESS_CODE,  PROCESS_DETAIL,  EXHF_ID,  PROCESS_NAME,  MESSAGE_DESC,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  STATUS,  PROCESS_STATUS,  PROCESS_TYPE,  MESSAGE_DATA,  CREATEDDATEMILISEC,  DT_CODE,  DTT_CODE from  (  select   NPSSTRRD.NPSSTRRD_ID,   NPSSTRRD.MSG_ID,   NPSSTRRD.UETR,   NPSSTRRD.PARENT_NPSSTRRD_REFNO,   NPSSTRRD.NPSSTRRD_REFNO,   NPSSTRRD.MESSAGE_DATA,   NPSSTRRD.PROCESS_CODE,   NPSSTRRD.PROCESS_DETAIL,   NPSSTRRD.EXHF_ID,   NPSSTRRD.PROCESS_NAME,   NPSSTRRD.MESSAGE_DESC,   NPSSTRRD.CHANNEL_ID,   NPSSTRRD.CHANNEL_REFNO,   NPSSTRRD.CHANNEL_USERID,   NPSSTRRD.CHANNEL_PRODUCT,   NPSSTRRD.CHANNEL_SUB_PRODUCT,   NPSSTRRD.CHANNEL_TRAN_CODE,   NPSSTRRD.CREATED_BY,   NPSSTRRD.CREATED_BY_NAME,   NPSSTRRD.CREATED_DATE,   NPSSTRRD.DT_CODE,   NPSSTRRD.DT_DESCRIPTION,   NPSSTRRD.DTT_CODE,   NPSSTRRD.DTT_DESCRIPTION,   NPSSTRRD.MODIFIED_BY,   NPSSTRRD.MODIFIED_BY_NAME,   NPSSTRRD.MODIFIED_DATE,   NPSSTRRD.STATUS,   NPSSTRRD.PROCESS_STATUS,   NT.PROCESS_TYPE,   NPSSTRRD.SYSTEM_ID,   NPSSTRRD.SYSTEM_NAME,   NPSSTRRD.TENANT_ID,   NPSSTRRD.APP_ID,   NPSSTRRD.VERSION_NO,   TO_CHAR(NPSSTRRD.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC  from   <arc_tran_db>.NPSS_TRN_REQ_RESP_DTLS NPSSTRRD  inner join <arc_tran_db>.NPSS_TRANSACTIONS NT on   NPSSTRRD.UETR = NT.UETR) RR $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665903906193$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_16$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1686724219235~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686724219235$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  Fn_card_decrypt_and_mask_rpt(cr_acct_identification) as cr_acct_identification_mask,  CR_ACCT_IDENTIFICATION,  UETR,  VALUE_DATE,  ACCP_DATE_TIME,  CREATED_DATE,  DATEMI,  EXHF_ID,  CDTR_IBAN,  TENANT_ID,  TRAN_REF_ID,  DEPARTMENT_CODE,  PAYMENT_ENDTOEND_ID,  CLRSYSREF,  CDTR_ACCT_NO,  DBTR_ACCT_NO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  STATUS,  PROCESSING_SYSTEM,  PROCESS_STATUS,  DBTR_ACCT_NAME,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  DBTR_CUST_TYPE,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  CDTR_ACCT_NAME,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  DR_SORT_CODE,  CR_SORT_CODE,  CATEGORY_PURPOSE,  CATEGORY_PURPOSE_PRTY,  BASE_CURRENCY,  BASE_AMOUNT,  HDR_TOTAL_RECORDS,  HDR_TOTAL_AMOUNT,  HDR_CLEARING_SYSTEM,  CHARGE_BEARER,  REMITTANCE_INFO,  ACCOUNT_CURRENCY,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  ISSUER_TYPE_CODE,  CBS_REF_NO,  CBS_POSTING_FLAG,  PROCESS_TYPE,  PROCESS_GROUP from  (  select   NT.NPSST_ID,   NT.UETR,   NT.VALUE_DATE,   NT.ACCP_DATE_TIME,   NT.CREATED_DATE,   TO_CHAR(NT.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   NT.DEPARTMENT_CODE,   NT.TENANT_ID,   NT.EXHF_ID,   NT.CDTR_IBAN,   NT.TRAN_REF_ID,   NT.PAYMENT_ENDTOEND_ID,   NT.CLRSYSREF,   NT.CDTR_ACCT_NO,   NT.DBTR_ACCT_NO,   NT.INTRBK_STTLM_CUR,   NT.INTRBK_STTLM_AMNT,   NT.STATUS,   NT.PROCESSING_SYSTEM,   NT.PROCESS_STATUS,   NT.DBTR_ACCT_NAME,   NT.DBTR_PHONE_NO,   NT.DBTR_EMAIL_ID,   NT.DBTR_DOCUMENT_ID,   NT.DBTR_IBAN,   NT.DBTR_CUST_TYPE,   NT.DBTR_PRVT_ID,   NT.DBTR_OTHER_ISSUER,   NT.CDTR_ACCT_NAME,   NT.CDTR_PHONE_NO,   NT.CDTR_EMAIL_ID,   NT.CDTR_DOCUMENT_ID,   NT.DR_SORT_CODE,   NT.CR_SORT_CODE,   NT.CATEGORY_PURPOSE,   NT.CATEGORY_PURPOSE_PRTY,   NT.CR_ACCT_IDENTIFICATION,   NT.BASE_CURRENCY,   NT.BASE_AMOUNT,   NT.HDR_TOTAL_RECORDS,   NT.HDR_TOTAL_AMOUNT,   NT.HDR_CLEARING_SYSTEM,   NT.CHARGE_BEARER,   NT.REMITTANCE_INFO,   NT.ACCOUNT_CURRENCY,   NT.CHANNEL_ID,   NT.CHANNEL_REFNO,   NT.CHANNEL_USERID,   NT.CHANNEL_PRODUCT,   NT.CHANNEL_SUB_PRODUCT,   NT.CHANNEL_TRAN_CODE,   NT.ISSUER_TYPE_CODE,   NT.CBS_REF_NO,   NT.CBS_POSTING_FLAG,   NT.PROCESS_TYPE,   NT.PROCESS_GROUP  from   <arc_tran_db>.NPSS_TRANSACTIONS NT ) V $WHERE order by  NPSST_ID desc$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_2$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1686724265186~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686724265186$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   <arc_tran_db>.NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_8$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1686744023631~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686744023631$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  PROCESS_STATUS,  STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DEPARTMENT_CODE,  DT_CODE,  DTT_CODE,  PROCESS_TYPE,  AMOUNT_CREDITED,  AMT_CR_LOC_CUR,  CHARGE_AMOUNT,  BUY_CURRENCY,  SELL_CURRENCY,  DEALT_AMOUNT,  EXCHANGE_RATE,  CONTRA_AMOUNT from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   NT.PROCESS_TYPE,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   NT.DEPARTMENT_CODE,   NT.NPSST_ID,   A.ADDITIONAL_INFO,   A.AMOUNT_CREDITED,   A.AMT_CR_LOC_CUR,   A.CHARGE_AMOUNT,   A.BUY_CURRENCY,   A.SELL_CURRENCY,   A.DEALT_AMOUNT,   A.EXCHANGE_RATE,   A.CONTRA_AMOUNT,   T24RC.ERROR_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.ERROR_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION  from   <arc_tran_db>.NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_ERROR_CODES T24RC on   T24RC.ERROR_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$  left join <arc_tran_db>.NPSS_TRANSACTIONS NT on   NT.UETR = A.UETR  order by   A.NPSSTPL_ID) V $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_27$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1686724059339~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686724059339$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  PROCESS_STATUS,  STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DEPARTMENT_CODE,  DT_CODE,  DTT_CODE,  PROCESS_TYPE,  AMOUNT_CREDITED,  AMT_CR_LOC_CUR,  CHARGE_AMOUNT,  BUY_CURRENCY,  SELL_CURRENCY,  DEALT_AMOUNT,  EXCHANGE_RATE,  CONTRA_AMOUNT from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   NT.PROCESS_TYPE,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   NT.DEPARTMENT_CODE,   NT.NPSST_ID,   A.ADDITIONAL_INFO,   A.AMOUNT_CREDITED,   A.AMT_CR_LOC_CUR,   A.CHARGE_AMOUNT,   A.BUY_CURRENCY,   A.SELL_CURRENCY,   A.DEALT_AMOUNT,   A.EXCHANGE_RATE,   A.CONTRA_AMOUNT,   T24RC.ERROR_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.ERROR_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION  from  <arc_tran_db>.NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_ERROR_CODES T24RC on   T24RC.ERROR_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$  left join <arc_tran_db>.NPSS_TRANSACTIONS NT on   NT.UETR = A.UETR  order by   A.NPSSTPL_ID) V $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_18$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721810940_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1686724189954~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721810940_0$DQ$,$DQ$DS_1686724189954$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  distinct PROCESSING_SYSTEM,  PROCESS_STATUS from  (  select   NT.NPSST_ID,   NT.UETR,   NT.VALUE_DATE,   NT.ACCP_DATE_TIME,   NT.CREATED_DATE,   TO_CHAR(NT.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   NT.DEPARTMENT_CODE,   NT.TENANT_ID,   NT.EXHF_ID,   NT.CDTR_IBAN,   NT.TRAN_REF_ID,   NT.PAYMENT_ENDTOEND_ID,   NT.CLRSYSREF,   NT.CDTR_ACCT_NO,   NT.DBTR_ACCT_NO,   NT.INTRBK_STTLM_CUR,   NT.INTRBK_STTLM_AMNT,   NT.STATUS,   NT.PROCESSING_SYSTEM,   NT.PROCESS_STATUS,   NT.DBTR_ACCT_NAME,   NT.PROCESS_TYPE,   NT.DBTR_PHONE_NO,   NT.DBTR_EMAIL_ID,   NT.DBTR_DOCUMENT_ID,   NT.DBTR_IBAN,   NT.DBTR_CUST_TYPE,   NT.DBTR_PRVT_ID,   NT.DBTR_OTHER_ISSUER,   NT.CDTR_ACCT_NAME,   NT.CDTR_PHONE_NO,   NT.CDTR_EMAIL_ID,   NT.CDTR_DOCUMENT_ID,   NT.DR_SORT_CODE,   NT.CR_SORT_CODE,   NT.CATEGORY_PURPOSE,   NT.CATEGORY_PURPOSE_PRTY,   NT.CR_ACCT_IDENTIFICATION,   NT.BASE_CURRENCY,   NT.BASE_AMOUNT,   NT.HDR_TOTAL_RECORDS,   NT.HDR_TOTAL_AMOUNT,   NT.HDR_CLEARING_SYSTEM,   NT.CHARGE_BEARER,   NT.REMITTANCE_INFO,   NT.ACCOUNT_CURRENCY,   NT.CHANNEL_ID,   NT.CHANNEL_REFNO,   NT.CHANNEL_USERID,   NT.CHANNEL_PRODUCT,   NT.CHANNEL_SUB_PRODUCT,   NT.CHANNEL_TRAN_CODE,   NT.ISSUER_TYPE_CODE,   NT.CBS_REF_NO,   NT.CBS_POSTING_FLAG,   NT.PROCESS_GROUP  from   <arc_tran_db>.NPSS_TRANSACTIONS NT )v $WHERE order by  PROCESSING_SYSTEM,  PROCESS_STATUS$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_1$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721925571_0",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" DELETE FROM QRY_INFO WHERE WFTPA_ID=? AND APP_ID=?\", \"params\" : [\"WFT_NPSS_P_1304_1686721925571_0\", \"215\"] }",
  "qry_type": "D"
},{
  "key": "215~WFT_NPSS_P_1304_1686721925571_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665903906193~DS_1686726745929~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721925571_0$DQ$,$DQ$DS_1686726745929$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSSTRRD_ID,  MSG_ID,  UETR,  PARENT_NPSSTRRD_REFNO,  NPSSTRRD_REFNO,  PROCESS_CODE,  PROCESS_DETAIL,  EXHF_ID,  PROCESS_NAME,  MESSAGE_DESC,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  STATUS,  PROCESS_STATUS,  PROCESS_TYPE,  MESSAGE_DATA,  CREATEDDATEMILISEC,  DT_CODE,  DTT_CODE from  (  select   NPSSTRRD.NPSSTRRD_ID,   NPSSTRRD.MSG_ID,   NPSSTRRD.UETR,   NPSSTRRD.PARENT_NPSSTRRD_REFNO,   NPSSTRRD.NPSSTRRD_REFNO,   NPSSTRRD.MESSAGE_DATA,   NPSSTRRD.PROCESS_CODE,   NPSSTRRD.PROCESS_DETAIL,   NPSSTRRD.EXHF_ID,   NPSSTRRD.PROCESS_NAME,   NPSSTRRD.MESSAGE_DESC,   NPSSTRRD.CHANNEL_ID,   NPSSTRRD.CHANNEL_REFNO,   NPSSTRRD.CHANNEL_USERID,   NPSSTRRD.CHANNEL_PRODUCT,   NPSSTRRD.CHANNEL_SUB_PRODUCT,   NPSSTRRD.CHANNEL_TRAN_CODE,   NPSSTRRD.CREATED_BY,   NPSSTRRD.CREATED_BY_NAME,   NPSSTRRD.CREATED_DATE,   NPSSTRRD.DT_CODE,   NPSSTRRD.DT_DESCRIPTION,   NPSSTRRD.DTT_CODE,   NPSSTRRD.DTT_DESCRIPTION,   NPSSTRRD.MODIFIED_BY,   NPSSTRRD.MODIFIED_BY_NAME,   NPSSTRRD.MODIFIED_DATE,   NPSSTRRD.STATUS,   NPSSTRRD.PROCESS_STATUS,   NT.PROCESS_TYPE,   NPSSTRRD.SYSTEM_ID,   NPSSTRRD.SYSTEM_NAME,   NPSSTRRD.TENANT_ID,   NPSSTRRD.APP_ID,   NPSSTRRD.VERSION_NO,   TO_CHAR(NPSSTRRD.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC  from   <arc_tran_db>.NPSS_TRN_REQ_RESP_DTLS NPSSTRRD  inner join <arc_tran_db>.NPSS_TRANSACTIONS NT on   NPSSTRRD.UETR = NT.UETR) RR $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665903906193$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_16$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721925571_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1686726989321~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721925571_0$DQ$,$DQ$DS_1686726989321$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   <arc_tran_db>.NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_9$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721925571_0~E_1669203693291~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1686727015329~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721925571_0$DQ$,$DQ$DS_1686727015329$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  DATEMI,  ACCP_DATE_TIME,  DEPARTMENT_CODE,  PROCESS_GROUP,  CHANNEL_ID,  CHANNEL_PRODUCT,  CHANNEL_REFNO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  EXHF_ID,  MODIFIED_DATE_UTC,  VALUE_DATE,  CREATED_DATE,  MODIFIED_DATE_UTC,  CDTR_ACCT_NO,  CDTR_ACCT_NAME,  fn_card_decrypt_and_mask(CR_ACCT_IDENTIFICATION,  $PCIDSS_KEY) as CR_ACCT_IDENTIFICATION,  fn_card_decrypt_and_mask(DBTR_ACCT_NO,  $PCIDSS_KEY) as DBTR_ACCT_NO,  DBTR_ACCT_NAME,  DR_SORT_CODE,  CR_SORT_CODE,  UETR,  REMITTANCE_INFO,  category_purpose,  issuer_type_code,  HDR_MSG_ID,  PRODUCT_CODE,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  PROCESS_TYPE,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  CDTR_IBAN,  CLRSYSREF,  PAYMENT_ENDTOEND_ID,  PROCESS_STATUS,  STATUS,  DT_CODE,  DTT_CODE,  TENANT_ID,  TS_ID,  LOCKED_BY,  LOCKED_BY_NAME,  VERSION_NO,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  TRAN_REF_ID,  PROCESSING_SYSTEM from  (  select   A.NPSST_ID,   A.VALUE_DATE,   A.MODIFIED_DATE_UTC,   A.CREATED_DATE,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   A.CDTR_ACCT_NO,   A.CDTR_ACCT_NAME,   A.INTRBK_STTLM_AMNT,   A.INTRBK_STTLM_CUR,   A.DBTR_ACCT_NO,   A.DBTR_ACCT_NAME,   A.DR_SORT_CODE,   A.CR_SORT_CODE,   A.DEPARTMENT_CODE,   A.PROCESS_GROUP,   A.UETR,   a.category_purpose,   A.issuer_type_code,   A.HDR_MSG_ID,   A.PRODUCT_CODE,   A.CHANNEL_ID,   A.CHANNEL_REFNO,   A.CHANNEL_PRODUCT,   A.CHANNEL_SUB_PRODUCT,   A.CHANNEL_TRAN_CODE,   A.PROCESS_TYPE,   A.DBTR_PHONE_NO,   A.DBTR_EMAIL_ID,   A.DBTR_DOCUMENT_ID,   A.DBTR_IBAN,   A.CDTR_PHONE_NO,   A.CDTR_EMAIL_ID,   A.CDTR_DOCUMENT_ID,   A.CDTR_IBAN,   A.CLRSYSREF,   A.PAYMENT_ENDTOEND_ID,   A.TRAN_REF_ID,   A.ACCP_DATE_TIME,   A.EXHF_ID,   A.REMITTANCE_INFO,   A.INWARD_FILE_NAME,   A.PROCESS_STATUS,   A.CBS_REF_NO,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.VERSION_NO,   A.DBTR_PRVT_ID,   A.DBTR_OTHER_ISSUER,   A.CR_ACCT_IDENTIFICATION,   TS.TS_ID,   TS.LOCKED_BY,   TS.LOCKED_BY_NAME,   A.PROCESSING_SYSTEM  from   <arc_tran_db>.NPSS_TRANSACTIONS A  left join TRANSACTION_SET TS on   TS.TRN_ID = A.NPSST_ID   and TS.DTT_CODE = A.DTT_CODE  order by   A.NPSST_ID desc) VW $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$E_1669203693291$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_8$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721925571_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665905039255~DS_1686726708409~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721925571_0$DQ$,$DQ$DS_1686726708409$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  REVERSAL_DESCRIPTION,  T24_RETURN_DESCRIPTION,  CBUAE_RETURN_DESCRIPTION,  NPSSTPL_ID,  MSG_ID,  UETR,  NPSSTRRD_REFNO,  PROCESS_NAME,  PROCESSING_SYSTEM,  RESPONSE_CODE,  PROCESS_REF_NO,  RESPONSE_DATA,  CREATED_DATE,  CREATEDDATEMILISEC,  PROCESS_STATUS,  STATUS,  REQUEST_DATA_JSON,  RESPONSE_DATA_JSON,  T24_RETURN_CODE,  CBUAE_RETURN_CODE,  REVERSAL_CODE,  REVERSAL_DESC,  T24_RETURN_DESC,  CBUAE_RETURN_DESC,  TENANT_ID,  DEPARTMENT_CODE,  DT_CODE,  DTT_CODE,  PROCESS_TYPE,  AMOUNT_CREDITED,  AMT_CR_LOC_CUR,  CHARGE_AMOUNT,  BUY_CURRENCY,  SELL_CURRENCY,  DEALT_AMOUNT,  EXCHANGE_RATE,  CONTRA_AMOUNT from  (  select   A.NPSSTPL_ID,   A.MSG_ID,   A.UETR,   NT.PROCESS_TYPE,   A.NPSSTRRD_REFNO,   A.PROCESS_NAME,   A.PROCESSING_SYSTEM,   A.RESPONSE_CODE,   A.PROCESS_REF_NO,   A.RESPONSE_DATA,   TO_CHAR(A.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as CREATEDDATEMILISEC,   A.CREATED_DATE,   A.PROCESS_STATUS,   A.STATUS,   A.DT_CODE,   A.DTT_CODE,   A.TENANT_ID,   A.REQUEST_DATA_JSON,   A.RESPONSE_DATA_JSON,   A.T24_RETURN_CODE,   NT.DEPARTMENT_CODE,   NT.NPSST_ID,   A.ADDITIONAL_INFO,   A.AMOUNT_CREDITED,   A.AMT_CR_LOC_CUR,   A.CHARGE_AMOUNT,   A.BUY_CURRENCY,   A.SELL_CURRENCY,   A.DEALT_AMOUNT,   A.EXCHANGE_RATE,   A.CONTRA_AMOUNT,   T24RC.ERROR_DESCRIPTION as T24_RETURN_DESC,   CONCAT(A.T24_RETURN_CODE, $SQ$-$SQ$, T24RC.ERROR_DESCRIPTION) as T24_RETURN_DESCRIPTION,   A.CBUAE_RETURN_CODE,   CBUAERC.RETURN_DESCRIPTION as CBUAE_RETURN_DESC,   CONCAT(A.CBUAE_RETURN_CODE, $SQ$-$SQ$, CBUAERC.RETURN_DESCRIPTION) as CBUAE_RETURN_DESCRIPTION,   A.REVERSAL_CODE,   CCD.CD_DESCRIPTION as REVERSAL_DESC,   CONCAT(A.REVERSAL_CODE, $SQ$-$SQ$, CCD.CD_DESCRIPTION) as REVERSAL_DESCRIPTION  from  <arc_tran_db>.NPSS_TRN_PROCESS_LOG A  left join <tran_db>.CORE_NC_CODE_DESCRIPTIONS CCD on   CCD.CD_CODE = A.REVERSAL_CODE   and CCD.CD_CATEGORY = $SQ$REVERSAL_REASON_IDENTIFIER_CODE$SQ$   and CCD.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_ERROR_CODES T24RC on   T24RC.ERROR_CODE = A.T24_RETURN_CODE   and T24RC.PROCESSING_SYSTEM = $SQ$T24$SQ$   and T24RC.NEED_SYNC = $SQ$Y$SQ$  left join <tran_db>.CORE_NC_RETURN_CODES CBUAERC on   CBUAERC.RETURN_CODE = A.CBUAE_RETURN_CODE   and CBUAERC.PROCESSING_SYSTEM = $SQ$CBUAE$SQ$   and CBUAERC.NEED_SYNC = $SQ$Y$SQ$  left join <arc_tran_db>.NPSS_TRANSACTIONS NT on   NT.UETR = A.UETR  order by   A.NPSSTPL_ID) V $WHERE$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665905039255$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_18$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721925571_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1686726765376~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721925571_0$DQ$,$DQ$DS_1686726765376$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  distinct PROCESSING_SYSTEM,  PROCESS_STATUS from  (  select   NT.NPSST_ID,   NT.UETR,   NT.VALUE_DATE,   NT.ACCP_DATE_TIME,   NT.CREATED_DATE,   TO_CHAR(NT.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   NT.DEPARTMENT_CODE,   NT.TENANT_ID,   NT.EXHF_ID,   NT.CDTR_IBAN,   NT.TRAN_REF_ID,   NT.PAYMENT_ENDTOEND_ID,   NT.CLRSYSREF,   NT.CDTR_ACCT_NO,   NT.DBTR_ACCT_NO,   NT.INTRBK_STTLM_CUR,   NT.INTRBK_STTLM_AMNT,   NT.STATUS,   NT.PROCESSING_SYSTEM,   NT.PROCESS_STATUS,   NT.DBTR_ACCT_NAME,   NT.PROCESS_TYPE,   NT.DBTR_PHONE_NO,   NT.DBTR_EMAIL_ID,   NT.DBTR_DOCUMENT_ID,   NT.DBTR_IBAN,   NT.DBTR_CUST_TYPE,   NT.DBTR_PRVT_ID,   NT.DBTR_OTHER_ISSUER,   NT.CDTR_ACCT_NAME,   NT.CDTR_PHONE_NO,   NT.CDTR_EMAIL_ID,   NT.CDTR_DOCUMENT_ID,   NT.DR_SORT_CODE,   NT.CR_SORT_CODE,   NT.CATEGORY_PURPOSE,   NT.CATEGORY_PURPOSE_PRTY,   NT.CR_ACCT_IDENTIFICATION,   NT.BASE_CURRENCY,   NT.BASE_AMOUNT,   NT.HDR_TOTAL_RECORDS,   NT.HDR_TOTAL_AMOUNT,   NT.HDR_CLEARING_SYSTEM,   NT.CHARGE_BEARER,   NT.REMITTANCE_INFO,   NT.ACCOUNT_CURRENCY,   NT.CHANNEL_ID,   NT.CHANNEL_REFNO,   NT.CHANNEL_USERID,   NT.CHANNEL_PRODUCT,   NT.CHANNEL_SUB_PRODUCT,   NT.CHANNEL_TRAN_CODE,   NT.ISSUER_TYPE_CODE,   NT.CBS_REF_NO,   NT.CBS_POSTING_FLAG,   NT.PROCESS_GROUP  from   <arc_tran_db>.NPSS_TRANSACTIONS NT )v $WHERE order by  PROCESSING_SYSTEM,  PROCESS_STATUS$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_1$DQ$] }",
  "qry_type": "I"
},{
  "key": "215~WFT_NPSS_P_1304_1686721925571_0~DEFAULT~DT_1304_1665901130705~DTT_1304_1665901217208~DS_1686726909865~DEFAULT~1",
  "target": "QRY_INFO",
  "content": "{ \"query\" : \" INSERT INTO QRY_INFO (WFTPA_ID,DS_CODE,MAIN_QRY_MODE,MAIN_QRY_TYPE,MAIN_QRY_TEXT,APP_ID,SORT_ORDER,EVENT_CODE,DT_CODE,DTT_CODE,LISTING_MODE, LOCKING_MODE, LOCKING_PARAMETER,PROCESS,SETUP_JSON,SYSTEM_TYPE,UICGC_CODE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\", \"params\" : [$DQ$WFT_NPSS_P_1304_1686721925571_0$DQ$,$DQ$DS_1686726909865$DQ$,$DQ$M$DQ$,$DQ$S$DQ$,$DQ$ select  NPSST_ID,  Fn_card_decrypt_and_mask_rpt(cr_acct_identification) as cr_acct_identification_mask,  CR_ACCT_IDENTIFICATION,  UETR,  VALUE_DATE,  ACCP_DATE_TIME,  CREATED_DATE,  DATEMI,  EXHF_ID,  CDTR_IBAN,  TENANT_ID,  TRAN_REF_ID,  DEPARTMENT_CODE,  PAYMENT_ENDTOEND_ID,  CLRSYSREF,  CDTR_ACCT_NO,  DBTR_ACCT_NO,  INTRBK_STTLM_CUR,  INTRBK_STTLM_AMNT,  STATUS,  PROCESSING_SYSTEM,  PROCESS_STATUS,  DBTR_ACCT_NAME,  DBTR_PHONE_NO,  DBTR_EMAIL_ID,  DBTR_DOCUMENT_ID,  DBTR_IBAN,  DBTR_CUST_TYPE,  DBTR_PRVT_ID,  DBTR_OTHER_ISSUER,  CDTR_ACCT_NAME,  CDTR_PHONE_NO,  CDTR_EMAIL_ID,  CDTR_DOCUMENT_ID,  DR_SORT_CODE,  CR_SORT_CODE,  CATEGORY_PURPOSE,  CATEGORY_PURPOSE_PRTY,  BASE_CURRENCY,  BASE_AMOUNT,  HDR_TOTAL_RECORDS,  HDR_TOTAL_AMOUNT,  HDR_CLEARING_SYSTEM,  CHARGE_BEARER,  REMITTANCE_INFO,  ACCOUNT_CURRENCY,  CHANNEL_ID,  CHANNEL_REFNO,  CHANNEL_USERID,  CHANNEL_PRODUCT,  CHANNEL_SUB_PRODUCT,  CHANNEL_TRAN_CODE,  ISSUER_TYPE_CODE,  CBS_REF_NO,  CBS_POSTING_FLAG,  PROCESS_TYPE,  PROCESS_GROUP from  (  select   NT.NPSST_ID,   NT.UETR,   NT.VALUE_DATE,   NT.ACCP_DATE_TIME,   NT.CREATED_DATE,   TO_CHAR(NT.CREATED_DATE, $SQ$YYYY-MM-DD HH:MI:SS:MS AM$SQ$) as DATEMI,   NT.DEPARTMENT_CODE,   NT.TENANT_ID,   NT.EXHF_ID,   NT.CDTR_IBAN,   NT.TRAN_REF_ID,   NT.PAYMENT_ENDTOEND_ID,   NT.CLRSYSREF,   NT.CDTR_ACCT_NO,   NT.DBTR_ACCT_NO,   NT.INTRBK_STTLM_CUR,   NT.INTRBK_STTLM_AMNT,   NT.STATUS,   NT.PROCESSING_SYSTEM,   NT.PROCESS_STATUS,   NT.DBTR_ACCT_NAME,   NT.DBTR_PHONE_NO,   NT.DBTR_EMAIL_ID,   NT.DBTR_DOCUMENT_ID,   NT.DBTR_IBAN,   NT.DBTR_CUST_TYPE,   NT.DBTR_PRVT_ID,   NT.DBTR_OTHER_ISSUER,   NT.CDTR_ACCT_NAME,   NT.CDTR_PHONE_NO,   NT.CDTR_EMAIL_ID,   NT.CDTR_DOCUMENT_ID,   NT.DR_SORT_CODE,   NT.CR_SORT_CODE,   NT.CATEGORY_PURPOSE,   NT.CATEGORY_PURPOSE_PRTY,   NT.CR_ACCT_IDENTIFICATION,   NT.BASE_CURRENCY,   NT.BASE_AMOUNT,   NT.HDR_TOTAL_RECORDS,   NT.HDR_TOTAL_AMOUNT,   NT.HDR_CLEARING_SYSTEM,   NT.CHARGE_BEARER,   NT.REMITTANCE_INFO,   NT.ACCOUNT_CURRENCY,   NT.CHANNEL_ID,   NT.CHANNEL_REFNO,   NT.CHANNEL_USERID,   NT.CHANNEL_PRODUCT,   NT.CHANNEL_SUB_PRODUCT,   NT.CHANNEL_TRAN_CODE,   NT.ISSUER_TYPE_CODE,   NT.CBS_REF_NO,   NT.CBS_POSTING_FLAG,   NT.PROCESS_TYPE,   NT.PROCESS_GROUP  from   <arc_tran_db>.NPSS_TRANSACTIONS NT ) V $WHERE order by  NPSST_ID desc$DQ$,$DQ$215$DQ$,$DQ$1$DQ$,$DQ$DEFAULT$DQ$,$DQ$DT_1304_1665901130705$DQ$,$DQ$DTT_1304_1665901217208$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$$DQ$,$DQ$WF_SELECT$DQ$,$DQ${}$DQ$,$DQ$DEFAULT$DQ$,$DQ$UICGC_2$DQ$] }",
  "qry_type": "I"
}]